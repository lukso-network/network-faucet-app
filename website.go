// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (10.38kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x5a\x7b\x73\xe3\x36\x92\xff\x5b\xfe\x14\x1d\xde\xcc\x4a\xba\x31\x49\xd9\x9e\xcc\xfa\x24\x52\xa9\xd9\x49\x76\x6f\xee\x72\x49\x6a\x33\xa9\xdb\x54\x36\x75\x05\x91\x2d\x11\x63\x10\x60\x00\x50\xb2\xe2\xd2\x77\xbf\x6a\x80\xa4\xa8\x87\xbd\xf3\x88\xff\xb0\x48\x3c\xba\x1b\xdd\x3f\xf4\x4b\x4a\xbe\xf8\xfa\xfb\x37\xef\x7e\xfe\xe1\x1b\x28\x6c\x29\xe6\x17\x09\x7d\x80\x60\x72\x95\x06\x28\x03\x1a\x40\x96\xcf\x2f\x06\x49\x89\x96\x41\x56\x30\x6d\xd0\xa6\x41\x6d\x97\xe1\x6d\xd0\x8d\x17\xd6\x56\x21\xfe\x56\xf3\x75\x1a\xfc\x23\xfc\xe9\x75\xf8\x46\x95\x15\xb3\x7c\x21\x30\x80\x4c\x49\x8b\xd2\xa6\xc1\xdb\x6f\x52\xcc\x57\xb8\xdf\x26\x59\x89\x69\xb0\xe6\xb8\xa9\x94\xb6\xbd\x95\x1b\x9e\xdb\x22\xcd\x71\xcd\x33\x0c\xdd\xcb\x25\x70\xc9\x2d\x67\x22\x34\x19\x13\x98\x5e\x05\xf3\x8b\x8b\x41\x62\xb9\x15\x38\xff\xf6\xa7\xff\xfe\xf1\x7b\xf8\xf6\xea\x15\xbc\x43\x63\x25\x5a\xf8\x2b\xab\x33\xb4\x49\xec\xe7\x69\xa5\xe0\xf2\x0e\x0a\x8d\xcb\x34\x20\x69\xcd\x34\x8e\xb3\x5c\xbe\x37\x51\x26\x54\x9d\x2f\x05\xd3\x18\x65\xaa\x8c\xd9\x7b\x76\x1f\x0b\xbe\x30\xb1\xdd\x70\x6b\x51\x87\x0b\xa5\xac\xb1\x9a\x55\xf1\x4d\x74\x13\xfd\x39\xce\x8c\x89\xbb\xb1\xa8\xe4\x32\xca\x8c\x09\x40\xa3\x48\x03\x63\xb7\x02\x4d\x81\x68\x03\x88\xe7\x9f\xc4\x76\xa9\xa4\x0d\xd9\x06\x8d\x2a\x31\x7e\x19\xfd\x39\x9a\x38\x8e\xfd\xe1\xa7\x99\x5e\x0c\x12\x93\x69\x5e\x59\x30\x3a\xfb\x60\xb6\xef\x7f\xab\x51\x6f\xe3\x9b\xe8\x2a\xba\x6a\x5e\x1c\x9b\xf7\x26\x98\x27\xb1\x27\x38\xff\x1c\xd2\xa1\x54\x76\x1b\x5f\x47\x2f\xa3\xab\xb8\x62\xd9\x1d\x5b\x61\xde\x32\xa2\xa9\xa8\x1d\xfc\xa3\xd8\x3e\x66\xbf\xf7\xc7\xe6\xfb\x03\x78\x95\xaa\x44\x69\xa3\xf7\x26\xbe\x8e\xae\x6e\xa3\x49\x3b\x70\x4a\x9e\xe8\x93\xbd\xe6\x17\x83\xc1\x42\xe5\x5b\x78\xb8\x18\x0c\x06\x0b\x96\xdd\xad\xb4\xaa\x65\x3e\x05\xbd\x5a\xb0\xd1\xf5\xcb\xdb\x4b\xb8\x9e\xfc\x07\xfd\xbb\xbd\x84\x49\xf4\xe5\xd5\x78\x76\x31\x18\xec\x2e\x06\x83\x68\x8d\xda\xf2\x8c\x89\x30\x43\x69\x51\x7b\x12\x25\x97\x61\x81\x7c\x55\xd8\x29\x5c\x4d\x26\xcf\x67\x67\x06\xd7\x85\x1b\xcd\xb9\xa9\x04\xdb\x4e\x61\x29\xf0\xde\x8d\x30\xc1\x57\x32\xe4\x16\x4b\x33\x05\x4f\xb5\xe3\x56\x69\xb5\xd2\x68\x8c\x67\x53\x29\xc3\x2d\x57\x72\x4a\xd8\x63\x96\xaf\xf1\x74\xa1\xa9\x98\x3c\x5e\xcd\x16\x46\x89\xda\xe2\xa1\x00\x0b\xa1\xb2\x3b\x37\xe4\x6e\x79\x4f\xf2\x4c\x09\xa5\xa7\xb0\x29\xb8\xed\x38\x54\x1a\x1b\xb2\x2c\xcf\xb9\x5c\x4d\xe1\x55\xe5\xe5\x2f\x99\x5e\x71\x39\x85\x49\xb3\x34\x89\x1b\x25\x27\xb1\x77\x60\x17\x09\x29\x7b\x7e\x91\xe4\x7c\x0d\x99\x60\xc6\xa4\xc1\x91\x1a\x9d\x5f\xea\x4d\x93\x37\x62\x5c\xfa\x89\x83\x19\xad\x36\x01\x38\x06\x69\xe0\x39\x87\x0b\x65\xad\x2a\xa7\x70\x45\x12\xb9\x0d\x47\xb4\x44\x28\x56\xe1\xd5\xb5\x9f\x1a\x24\xc5\x55\x4b\xc0\xe2\xbd\x0d\x9d\xfe\x3b\xcd\x07\xf3\x84\xb7\x3b\x97\x0c\x96\x2c\x5c\x30\x5b\x04\xc0\x34\x67\x61\xc1\xf3\x1c\x65\x1a\x58\x5d\x23\x01\x8b\xcf\xe1\xd4\xff\xbd\xae\x6d\x81\x92\x4e\x67\x31\xef\xbc\x61\x71\xe5\x05\x8b\x73\xbe\x76\x67\xea\x1e\x8e\x0e\xf7\x98\xfc\xb7\xd0\x3c\xa8\xe5\xd2\xa0\x0d\xbb\xe3\xf4\x96\x72\x59\xd5\x36\x24\x30\x57\xcd\xec\x20\x71\x63\xc0\xf3\x34\xa8\xb5\x08\x1a\xbf\xef\x1e\xed\xb6\x6a\x74\x10\x74\x27\x56\xba\x0c\x49\xf9\x5a\x89\x00\x2a\xc1\x32\x2c\x94\xc8\x51\xa7\xc1\x3b\x7f\xa5\xa1\x52\xc6\xc2\x4f\x7f\xff\x16\x1a\x1b\x71\xb9\x82\xad\xaa\x75\x4f\x13\xb6\xd1\x04\xcb\x73\xc2\x64\x10\xb7\xb2\x38\x70\x9e\xca\x1a\x2e\xac\x6c\xe5\xa5\x65\x8b\xda\x5a\xd5\x2d\x5c\x58\x09\x0b\x2b\xc3\x1c\x97\xac\x16\x16\x72\xad\xaa\x5c\x6d\x64\x68\xd5\x6a\x45\x41\xce\x9f\xc3\x6f\x0a\x20\x67\x96\x35\x53\x69\xd0\xae\x6d\xed\xc7\x4c\xa5\xaa\xba\x6a\x2c\xe8\x07\xf1\xbe\x62\x32\xc7\x9c\xec\x2d\x0c\x06\xf3\xbf\xf1\x35\x42\x89\xf0\xed\xcf\xff\xb0\x83\x63\x34\x64\x4c\xa3\x0d\xfb\x34\x4f\x30\x91\xc4\x5e\x16\x7f\x22\x68\xfe\x92\x5a\xb4\x94\xba\x13\x94\x28\x6b\x38\x78\x0b\x35\x39\x8c\x60\xfe\xf0\xa0\x99\x5c\x21\x3c\xe3\xf9\xfd\x25\x3c\x63\xa5\xaa\xa5\x85\x69\x0a\xd1\x6b\xf7\x68\x76\xbb\xbd\xbe\x04\x9f\x27\xec\x29\x4c\x83\x92\x99\xe0\xd9\x5d\x1a\x58\x8e\x3a\x7d\x78\x20\xb2\xbb\xdd\x0c\x1e\x1e\xf8\x12\x9e\x45\x7f\xc7\x8c\x55\x36\x2b\xd8\x6e\xb7\xd2\xed\x73\x84\xf7\x98\xd5\x16\x47\xe3\x87\x07\x14\x06\x77\x3b\x53\x2f\x4a\x6e\x47\xed\x76\x1a\x97\xf9\x6e\x47\xd2\x36\x12\xee\x76\x10\x13\x51\x99\xe3\x3d\x3c\x8b\x7e\x40\xcd\x55\x6e\xc0\xaf\x4f\x62\x36\x4f\x62\xc1\xe7\xcd\xbe\x43\xf5\xc4\xb5\xe8\x20\x90\xc4\x84\x94\x06\xdf\xee\xa2\x38\x41\xfb\x72\x1e\xdf\x92\x55\xd8\x09\xde\x60\xc0\x70\x8b\x77\xb8\x4d\x83\x87\x87\xfe\xc6\x66\x36\x63\x42\x90\xe7\x4f\x03\x7f\xaa\x6e\xd3\xef\x48\xd8\x5c\x73\xe3\x32\xa8\x79\xcb\xbe\x93\xf8\x5f\xdf\xe0\x23\xf7\x64\x55\x35\x85\x9b\xeb\xa7\x7c\xd3\xab\xa3\xbb\x7d\x73\xe6\x6e\x57\x4c\xa2\x00\xf7\x3f\x34\x25\x13\xed\x73\x73\x2d\xba\xfb\x7e\xbc\x25\x24\xe7\xdb\xc9\xd4\x79\xef\xc9\x0c\xd4\x1a\xf5\x52\xa8\xcd\x14\x58\x6d\xd5\x0c\x4a\x76\xdf\x05\xac\x9b\xc9\xa4\x13\x98\xa8\x5a\xb6\x10\xe8\xbc\x88\xc6\xdf\x6a\x34\xd6\x74\x3e\xc3\x4f\xb9\xff\xe4\x3a\x72\x94\x06\xf3\x23\x25\x10\x3f\xd2\xa5\x5b\xd5\x4a\xda\xea\xef\xac\xd4\x4b\xa5\x9a\xb8\xd0\x17\xa0\x21\xda\x0b\x58\xc1\x3c\xb1\xba\xe7\x3b\x6c\xfe\x51\xce\x5d\x53\x26\xf7\x98\x6f\xf7\xfe\x8a\x0e\x5d\x21\x6a\x9f\x4a\x10\x2e\xc1\xbd\x26\xb1\xcd\x3f\x9d\x31\xa1\x6d\xc1\x0c\x7e\x08\x77\x17\xa9\xf7\xdc\xdd\xeb\x67\xb2\x2f\x90\x69\xbb\x40\x66\x3f\x84\xff\xb2\x96\x79\xef\xf4\xe4\x17\x3f\x8f\x7b\x2d\xf9\x1a\xb5\xe1\x76\xfb\xa1\xec\x31\xdf\xf3\xf7\xef\x07\x12\x24\xb1\xd5\x8f\xc3\x6b\xff\xf8\xd1\x97\xf7\xa3\x73\x8b\x9b\xee\x5a\x90\x22\xda\xec\xe6\x3f\xd5\x06\x72\x85\x06\x6c\xc1\x0d\x6c\x94\xbe\xfb\x2a\x89\x8b\x9b\x66\x53\x35\x7f\x47\xc3\xa4\x57\x58\xba\x7c\x01\xb8\x01\x5d\x4b\x17\x5c\x95\x04\x5b\x20\x3c\x3c\x44\xdf\xa1\xa5\xad\xbb\x1d\x48\xff\x14\xc1\x3b\x05\x95\xc6\x35\x4a\x0b\x25\x13\x3c\xe3\xaa\x36\xc0\x32\xab\xb4\x81\xa5\x56\x25\xe0\x7d\xc1\x6a\x63\x89\x10\xf9\x0c\xb6\x66\x5c\xb8\xab\xe4\x8c\x0a\x4a\x03\xcb\xb2\xba\xac\x29\x9f\x94\x2b\x40\xa9\xea\x55\xe1\x45\xb1\x0a\x7c\xd8\x11\x4a\xae\x3a\x71\x4c\xc5\x4a\x60\xd6\xb2\xec\xce\x5c\x42\xeb\x0d\x80\x69\x04\xcb\x31\xa7\x5d\x99\x2a\x4b\x25\xe1\x46\xe7\x50\x31\x6d\xb7\x60\x54\xc6\x99\x68\xa5\x26\x8e\x2e\x86\x45\xf0\x5a\x6e\x95\x44\x28\xd8\xda\x09\x08\x6d\x92\xa1\x34\xfc\x95\x65\xb8\x50\xaa\x5b\x0d\x25\xdb\xb6\xec\x1a\xe1\x37\xdc\x16\xdc\x6b\xa7\x42\x5d\xd2\xd6\x1c\x04\x2f\xb9\x35\x51\x12\x57\xad\x0f\xdd\xc7\x5d\x11\x16\x4a\xf3\xdf\x29\x71\x11\x7b\x87\x69\x8f\xdc\x4a\xeb\x0d\x1d\x00\x04\x2e\xed\x14\x5e\x7a\x6f\x78\x8c\xe3\xa6\xcc\x39\x07\xe2\x96\xa6\xab\x1d\x29\xaa\x4c\xe1\xc6\x63\xc8\xa7\x08\xb9\xed\xf8\xe7\x47\x98\xf3\x2c\x6f\x6f\xab\xfb\x4e\x8a\x0e\x86\x93\x8e\x04\x99\xfe\x50\x1d\x6b\xde\x29\xf0\x12\x4a\x76\x87\xc0\x20\x61\x47\x15\x70\x23\xb2\xab\xa1\xb8\x2b\xf9\x63\xbb\x41\xb4\x5f\x11\x5e\xd3\xaf\x91\xe9\xe7\xd7\x13\x97\xca\xd1\xe7\xd5\xab\xe7\xd7\x13\x0f\xc9\xe7\xd7\x6f\x9e\x5f\x4f\x2a\x81\xcc\xe0\xf3\xeb\x89\x41\x99\xd3\x87\x2a\xe9\x8d\xf0\xf2\xfc\x7a\x62\xd5\xf3\xc9\xeb\xc9\xfd\xe4\x03\xff\x02\xb0\x4c\xaf\xd0\xa6\xc1\xff\xb1\x85\xaa\xed\x74\x21\x98\xbc\x0b\xe6\x4e\x20\xca\x16\x9c\x85\x9b\xec\x92\x10\xd9\x24\x94\x50\x31\x43\xa6\xe6\xd2\x2a\x67\xfd\xa6\x79\x61\x60\x64\x6a\xed\x4a\x39\x82\x13\x9d\xc8\xdd\x3a\x39\x24\xf4\xd0\xb1\xc7\x51\xb2\xd0\xf1\xfc\x8d\xaa\xb6\xa1\x23\xe2\xb6\x9f\x28\xc9\xd4\x55\xa5\xb4\x8d\xfa\xca\x62\x54\xb0\x08\x34\xf1\xed\xe4\xcb\xdb\x57\x4f\x8a\x6e\x28\x3f\x76\xf2\x77\x12\xb2\x85\x5a\x23\xf8\x5c\x7c\xa1\xee\x81\xc9\x1c\x96\x5c\x23\xb0\x0d\xdb\x7e\x91\xc4\x39\xd5\x49\x0e\x0f\x3e\xd3\xf9\x4e\x51\x19\xd1\x25\x79\x04\xd2\xbe\x5f\xc9\x29\x39\xd4\xc1\x27\x03\xb7\x96\x14\x43\x42\x26\xce\xfa\xff\x0f\xc6\xae\x03\xef\x13\x72\x7d\x26\xa0\x13\x63\xb5\x92\xab\x39\xa1\x40\xd5\x96\xce\xd7\x56\x56\x5c\x49\xaa\x33\xdd\xf4\x25\x18\x5e\x56\x62\x0b\xd9\xde\xac\xa7\x98\x79\xd4\x14\xff\x12\x33\x87\xc6\xf2\x08\x72\x0e\xbb\x54\x39\x92\xa7\x36\xb5\xc9\xb0\x72\x2d\x37\x72\x7f\x7f\xd9\xfe\xce\xa4\xe5\x12\x5b\x37\x19\xc1\xf7\x52\x6c\xa1\x36\x08\x4b\xa5\x21\xc7\x45\xbd\x5a\x39\xd7\xae\xa1\xd2\x7c\xcd\x2c\xb6\xbe\xd1\x34\x58\x68\xa0\xb0\xcf\x93\x93\x38\x17\x5d\xb8\xf8\x59\xd5\x90\x31\x09\x56\xb3\xec\xce\xdf\x80\x5a\x6b\x0a\x02\x15\xfa\x73\x74\x7e\x79\x81\x42\x6d\xdc\x12\x7f\xe2\x25\x47\xe1\x9c\xb4\x41\x84\x42\x6d\xa0\xac\x33\x77\xc5\xc8\x09\x3b\xf1\x37\x8c\x5b\xa8\xa5\xe5\xc2\x6b\xd1\xd6\x5a\x92\x4b\xc7\x9e\x53\x3d\x49\xc7\x13\x2c\xe7\xef\x0a\x3c\x13\xbe\xba\x5c\x1a\x34\xbe\xf1\xcb\xa1\xd2\xca\x62\x46\x46\x04\xb6\x62\x5c\x1a\xb2\x84\x73\xda\x58\x3e\x99\x6b\x37\x9f\xcd\xc7\x45\xd2\x35\x8e\xe2\x18\xfe\x26\xd4\x82\x09\x58\x13\x9e\x17\x82\x62\xad\x02\x2a\x5e\x0f\xf4\x63\x2c\xb3\xb5\x01\xb5\x74\xa3\x5e\xda\x8b\xc1\x9a\x69\xb2\x15\x96\x95\x85\xd4\x35\x32\x68\xc4\xa0\x5e\xbb\x5e\x0c\xbd\x50\xe1\xd4\x9b\xeb\xf4\x9b\xc2\x2f\xbf\xce\x2e\x9c\x00\x5f\xe3\xd2\x19\x9d\xd0\xeb\x0f\x67\x0b\x66\x21\xd3\xc8\x2c\x1a\xc8\x84\x32\xb5\xf6\x72\x51\xcd\x07\x24\x5b\x4b\xc7\x53\xa5\xe1\xca\xf1\x69\x49\x8c\x0a\x66\x8a\xb1\xeb\xbc\x68\x74\x96\xe8\x66\xfc\xe8\x80\x10\x35\xa2\xcd\x3c\x9d\xcc\x80\x27\x2d\xc5\x48\xa0\x5c\xd9\x62\x06\xfc\xc5\x8b\x66\xe9\x80\x2f\x61\xd4\xce\xff\xc2\x7f\x8d\xec\x7d\x44\xf4\x21\x4d\x61\xcf\x67\x40\xac\x1a\x1a\xa6\x12\x3c\xc3\x11\xbf\x04\xdf\x02\x1b\x0c\x06\x0b\x8d\xcc\xb7\x8d\x5c\x5f\xc8\xfd\xdb\x5d\x0c\x76\xb3\xbe\x0e\x9c\x72\x0f\xb4\xe0\xab\x2c\x03\x0c\x56\xdc\x58\xa8\xb5\x80\xe6\x3e\x7a\x35\x37\x2a\x77\xab\xfa\xe7\x3f\x41\x5a\xf3\xd0\xa0\xc4\x8b\xec\x49\x44\x14\x93\x46\xff\xf5\xe3\xf7\xdf\x45\xc6\x6a\x2e\x57\x7c\xb9\x1d\x3d\xd4\x5a\x4c\xe1\xd9\x28\xf8\xb7\x5a\x8b\x60\xfc\xcb\xe4\xd7\x68\xcd\x44\x8d\x97\xce\xa2\x53\xf7\xff\x84\xc7\x25\x34\x8f\x53\x38\x64\xb7\x1b\x8f\x67\xe7\x4a\xd1\x5e\xd5\xac\xd1\xa0\x1d\xd1\xb2\x06\xc6\x87\x9a\x61\x50\xa2\x2d\x94\xbb\x82\x1a\x33\x25\x25\x66\x16\xea\x4a\xc9\x46\x11\x20\x94\x31\x2d\xc8\xda\xf9\xf4\xd8\xec\xcd\xda\x14\x24\x6e\xe0\x7f\x71\xf1\xa3\xca\xee\xd0\x8e\x46\xa3\x0d\x97\xb9\xda\x44\x42\x79\x27\x19\xd1\x55\x53\x99\x12\x90\xa6\x29\x34\x01\x2e\x18\xc3\x57\x10\x6c\x0c\x85\xba\x00\xa6\xf4\x48\x4f\x63\x78\x01\xc7\xdb\x0b\x65\x2c\xbc\x80\x20\x66\x15\x0f\xc6\x04\xf4\x56\xd9\x4a\x96\x68\x0c\x5b\x61\x5f\x38\x97\x89\x36\x30\xa2\x13\x94\x66\x05\x29\x38\x93\x54\x4c\x1b\xf4\x0b\x22\x2a\x7e\x3c\x9e\x08\x91\x6e\x51\x9a\x82\xac\x85\x68\x21\xe8\xc1\x3e\xf3\x00\xeb\x2d\x8c\x7c\x64\xf8\x22\x4d\x81\xaa\x00\x52\x69\xde\xee\x21\x23\xfb\x52\x65\x1c\x91\x1f\xdf\xaf\x1f\xcf\x5a\xa4\x1e\xd0\xc1\xfc\x69\x42\x98\x1f\x53\xc2\xfc\x0c\x29\x57\x0d\x3e\x4e\xc9\xd7\x8e\x3d\x42\x6e\xe0\x0c\x1d\x59\x97\x0b\xd4\x8f\x13\xf2\x65\x60\x43\xc8\xa9\xf3\xad\xb4\xbd\x9d\x97\x70\xf5\x6a\x7c\x86\x2e\x6a\xad\x1e\x21\x2b\x95\xdd\x8e\x1e\x04\xdb\x52\x0a\x03\x43\xab\xaa\x37\xae\x62\x19\x5e\xba\x48\x38\x85\x6e\xff\xa5\x6b\xb3\x4d\x61\xe8\xde\x68\x9e\x97\xe8\x76\x7d\x39\x99\x4c\x2e\xa1\x6d\x40\xff\x85\xd1\xa5\xd2\x35\xee\xce\x48\x62\xea\x2c\xa3\x58\xfc\xe9\xb2\x34\x14\x3a\x69\x9a\xf7\x4f\x94\xa7\xf3\xe2\x07\x02\xc1\x9f\xfe\x04\x27\xb3\x7d\x70\xc6\x31\xfc\x0f\xa3\x3a\x46\x08\x57\x7d\xb9\xa2\xab\x5b\x5d\x72\x63\x5c\x35\x63\x20\x57\x12\xdd\x8e\x8f\x71\xd2\x27\xd2\x35\x8b\x60\x0e\x93\x63\xd1\xc8\x9d\xf5\x9c\xf8\x19\xdf\xde\x51\xed\x3b\xee\xc1\x6e\xcf\xe9\x60\x0f\x2f\x11\xbe\x48\x21\x08\xf6\xdb\x4e\xe6\x69\xba\x21\x33\x30\x68\xdf\x79\xbd\x8f\x9a\xd8\x75\x2e\xbe\x8c\x2f\xe1\x66\x32\x99\x8c\x0f\x98\xef\x5a\x55\xbe\xae\x28\x69\x01\x26\xb7\xce\x99\x75\x7a\x74\x09\x1b\x25\x20\xe4\x8c\x04\x64\x4a\x08\x9f\x33\xb8\x8d\xa4\xcc\xa6\xce\x4c\x21\xbc\x9a\x9d\xc4\xb7\x9e\xd6\xba\xc3\x1c\x9b\xe1\x8c\x96\x0f\x4d\x71\xa8\xa1\xa3\xa5\xe1\xd5\x81\xf2\x0f\xec\x72\xce\x00\x83\x4e\x5e\xde\xea\xef\xc0\x28\xad\x55\xfa\xfa\xe9\x49\xec\x77\xbf\xb8\xfa\x20\xc1\xbb\xc9\xaa\x36\xc5\xe8\x48\xb4\xf1\xec\xd0\x02\x6f\x2d\x6a\xca\x41\x15\x85\x14\xd2\x38\x25\xd9\x1a\x4f\x14\xef\x12\x61\x8d\xa1\x46\x99\xa3\x6e\x83\xbc\xcf\x9b\x29\xe5\xea\x19\xc6\xd5\x63\x3d\xa8\xf4\xce\x71\xa2\xc5\x19\x70\x98\x53\x6a\x05\x3c\x0c\xbb\x13\xb8\x7c\x48\x49\x04\x00\x38\x42\xb6\x43\x61\x0f\x86\xb4\x14\x05\xab\x0c\xe6\x90\x82\xff\xfa\x6f\x34\x8e\x6a\xc9\xef\x47\xe3\xb0\x79\x3f\xa6\xd0\xce\xcf\x9a\xba\xab\x95\xf9\x45\x0a\x41\x62\x35\xf0\x3c\x1d\x06\xf0\xe2\xdc\x9d\xa2\x80\x38\x9c\xb7\xdc\xfb\x1b\x01\x12\x9b\xcf\x5d\x87\xc8\x97\x40\xff\x0c\xfa\x5f\x2f\xd6\x5a\x8c\x4e\x88\xb2\x35\xb3\x4c\x3b\x9a\xe3\x19\xec\x97\x37\x95\x57\x46\x56\x99\x81\x2f\xf1\x5c\x1b\x19\xba\x26\xad\x7b\x5b\x28\x9d\xa3\x0e\x35\xcb\x79\x6d\xa6\xf0\xb2\xba\x9f\xfd\xb3\xed\x5b\xbb\x26\xd9\x13\x82\x56\x1a\xe7\x27\xf2\x34\xfd\x96\x17\x10\x24\x31\x2d\x78\x9a\x48\x77\xd0\xfe\xb7\x88\x70\xa6\x0d\x08\xdd\x77\x7e\xcd\x78\xc9\xf3\x5c\x20\x09\xdb\x12\xa7\xdb\x46\x36\xdf\xdf\x99\x43\x76\xd0\xf4\xfe\xda\xf5\x3b\x40\x61\xf0\xd1\xc5\x5d\x0b\x71\x48\x06\x0f\xe9\xa0\xdc\xe9\xb9\xa9\x59\xdd\xb0\x1e\x3a\x0d\x34\x5f\x1a\xe7\xb5\x76\x89\xcf\x28\x6c\x00\x75\x09\x43\x43\x69\x58\x6e\x86\xe3\xa8\xa8\x4b\x26\xf9\xef\x38\xa2\x80\x32\xf6\x1a\x72\x3d\xc9\xe0\xd0\xaf\x9e\x08\xb2\x6f\x19\x0e\xdb\xc0\x34\x6c\x14\x37\x6c\xad\xf9\x72\x5f\x1e\x4f\x61\x32\x1b\x7e\x84\x56\xce\x73\x08\x17\x4c\x43\xff\x25\x6c\xa3\x25\x68\x45\x9c\xdb\xb9\x05\xd3\x43\xdf\x06\x70\xa9\xb1\x54\x9b\x74\x78\x33\xe9\x04\xf4\x86\x75\x76\x1d\x36\xb8\x3a\x32\x00\x49\xd8\x5e\xc0\x39\xdc\x4c\x3e\x5f\x52\xdf\x48\x38\x92\xde\x6a\x5e\x61\x0e\x2c\xb3\x7c\x8d\x7f\xf8\x21\x3e\x5b\xb9\x1f\x2d\x1e\xe1\xae\x55\x9b\x83\xe5\x81\xac\x34\xdb\x69\xf5\xdf\xe9\x5e\x41\xec\x74\xfb\x02\x82\x33\x87\x78\x04\x79\x07\x8b\x8e\x2e\xef\x63\xf7\xda\x75\xd3\x83\x7e\x90\xa0\xf4\xb3\xfb\xe2\x67\x1c\x15\xb6\x14\xa3\x20\xb1\xee\x7b\x7d\x92\xb3\xdb\xed\x36\xfb\xe1\x7d\xbe\xb5\xeb\x57\x0d\x54\x06\xe3\x51\x41\x03\xbd\x3c\xa2\x2b\x7a\xda\xa4\x01\xa8\x80\xda\xb9\x1a\xea\x47\xcb\xb4\x05\x06\x3f\xbd\x85\xba\xca\x99\xa5\x20\xa4\x80\x42\x9c\x6f\x02\xb7\x3f\x82\x58\x30\x6d\x60\xa9\xf4\x86\xe9\xbc\x69\x65\xd8\x02\xb7\xae\x49\xed\x73\x32\x83\xf6\x2d\x79\xa5\x35\x13\xa3\xa3\xd2\xea\xd9\x68\x18\xf5\x0d\x3b\x1c\x47\xc8\xb2\xe2\x78\x99\x8b\x3a\x1d\xc7\x14\xbe\x73\x39\xf8\xe8\xd9\xc8\x16\xdc\x8c\x23\x66\xad\x1e\x0d\x0f\x0c\x3e\x1c\x93\xed\xae\xba\xba\xa7\xdb\x9c\xf4\xae\xcc\x53\xfb\xf7\x59\x6d\x13\xc1\xdb\xc5\x99\x31\x23\x8f\x9a\xe1\x65\x8f\xee\x21\x68\x86\xcf\x87\x8d\x49\xf6\x97\x76\x2f\x7f\x7a\x46\x86\x03\xb2\x43\xba\x3b\xc3\x23\xc6\x2c\xcf\xdf\xd0\xbd\x18\x05\x67\x6e\x6f\x1f\x01\xe3\x46\xb1\xde\xe3\x3e\xa1\x51\xff\xd5\xf1\x23\xea\xe4\xf9\x70\x1c\x99\x7a\xe1\xcb\xfb\xd1\x97\x4d\xb5\xd3\x2e\x72\xb0\x3c\x76\xe4\x27\xe1\x9f\x18\x1c\xa6\x00\xe1\x51\xca\xf0\x84\xcf\xf7\x3f\x04\x1a\x5f\x0c\x76\x97\xa4\xdc\xc9\xb8\xe9\xfd\x7c\x63\x28\x03\xe2\xa6\x00\x06\x1b\x5c\x18\x57\x8e\x43\x83\x64\xd7\x04\xf1\xcd\x8e\xd7\x3f\xbc\xed\x1a\x1e\x1d\xd2\x29\x09\xe9\x7e\xa5\x74\xda\x5e\x38\xfb\xa3\xa8\xcd\x66\x13\xad\x94\x5a\x09\xff\x73\xa8\xae\xff\x40\x85\x7a\xf4\xde\x04\xc0\xcc\x56\x66\x90\xe3\x12\xf5\xbc\x47\xdc\x37\x25\x92\xb8\xf9\x49\x4e\xec\x7f\x7b\xf8\xff\x01\x00\x00\xff\xff\x78\x2a\x93\xd7\x8c\x28\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xc3, 0xc2, 0xc8, 0xf5, 0x30, 0x8c, 0x6b, 0xac, 0x8c, 0x6b, 0x37, 0x4, 0xfd, 0xac, 0xaa, 0xc8, 0xb2, 0xee, 0x2d, 0x5c, 0x4d, 0x6f, 0x74, 0x47, 0xc, 0xf6, 0xd, 0x46, 0x80, 0x62, 0x97}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
